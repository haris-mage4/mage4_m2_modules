<?php
 ini_set('display_errors', 1);
 ini_set('display_startup_errors', 1);
 error_reporting(E_ALL);

require_once ('apple_pay_conf.php');
$amount 		= isset($_GET['amount']) ? $_GET['amount'] : "";
$description 	= isset($_GET['description']) ? $_GET['description'] : "" ;
?>
<!DOCTYPE html>
<html lang="en-GB">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>ApplePay</title>
<style>
#applePay {  
	width: 150px;  
	height: 50px;  
	display: none;   
	border-radius: 5px;    
	margin-left: auto;
	margin-right: auto;
	margin-top: 20px;
	background-image: -webkit-named-image(apple-pay-logo-white); 
	background-position: 50% 50%;
	background-color: black;
	background-size: 60%; 
	background-repeat: no-repeat;  
}
</style>
</head>
<!-- <body> -->
<div>
	<button type="button" id="applePay"></button>
	<p style="display:none" id="got_notactive">ApplePay is possible on this browser, but not currently activated.</p>
	<p style="display:none" id="notgot">ApplePay is not available on this browser</p>
	<p style="display:none" id="success">Test transaction completed, thanks>reset</a></p>
	<div id="divLog" style="display:block">
        Log:
    </div>
</div>

<script type="text/javascript">
var debug = <?=DEBUG?>;
if (window.ApplePaySession) {
   	var merchantIdentifier = '<?=PRODUCTION_MERCHANTIDENTIFIER?>';
   	var promise = ApplePaySession.canMakePaymentsWithActiveCard(merchantIdentifier);
   	promise.then(function (canMakePayments) {
	  	if (canMakePayments) {
		 	document.getElementById("applePay").style.display = "block";
		} else {   
			document.getElementById("got_notactive").style.display = "block";
		}
	}); 
} else {
	document.getElementById("notgot").style.display = "block";
}

document.getElementById("applePay").onclick = function(evt) {
	var runningAmount 	= <?php echo $amount; ?>;
	var runningPP		= 0;
	getShippingCosts('domestic_std', true);
	var runningTotal	= function() { return runningAmount + runningPP; }
	var shippingOption  = "";
	var subTotalDescr	= "<?php echo $description; ?>";
	 
	function getShippingOptions(shippingCountry) {
		if( shippingCountry.toUpperCase() == "<?=PRODUCTION_COUNTRYCODE?>" ) {
			shippingOption = [
				{
					label: 'Standard Shipping',
					amount: getShippingCosts('domestic_std', true),
					detail: '3-5 days',
					identifier: 'domestic_std'
				},
				{
					label: 'Expedited Shipping',
					amount: getShippingCosts('domestic_exp', false),
					detail: '1-3 days',
					identifier: 'domestic_exp'
				}
			];
		} else {
			shippingOption = [
				{
					label: 'International Shipping',
					amount: getShippingCosts('international', true),
					detail: '5-10 days',
					identifier: 'international'
				}
			];
		}
	}
	 
	 function getShippingCosts(shippingIdentifier, updateRunningPP ){
		var shippingCost = 0;
		switch(shippingIdentifier) {
			case 'domestic_std':
				shippingCost = 3;
				break;
			case 'domestic_exp':
				shippingCost = 6;
				break;
			case 'international':
				shippingCost = 9;
				break;
			default:
			shippingCost = 11;
		}
		if (updateRunningPP == true) {
			runningPP = shippingCost;
		}
		return shippingCost;
	 }

	var paymentRequest = {
		currencyCode: '<?=PRODUCTION_CURRENCYCODE?>',
		countryCode: '<?=PRODUCTION_COUNTRYCODE?>',
	   	lineItems: [
			   {
				   label: subTotalDescr,
				   amount: runningAmount
				},
				{
					label: 'P&P',
					amount: runningPP 
				}
			],
	   	total: {
			label: '<?=PRODUCTION_DISPLAYNAME?>',
		  	amount: runningTotal()
	   	},
	   	supportedNetworks: ['amex', 'masterCard', 'visa' ],
	   	merchantCapabilities: [ 'supports3DS', 'supportsEMV', 'supportsCredit', 'supportsDebit' ]
	};
	
	var session = new ApplePaySession(1, paymentRequest);
	
	// Merchant Validation
	session.onvalidatemerchant = function (event) {
		var promise = performValidation(event.validationURL);
		promise.then(function (merchantSession) {
			session.completeMerchantValidation(merchantSession);
		}); 
	}
	
	function performValidation(valURL) {
		return new Promise(function(resolve, reject) {
			var xhr = new XMLHttpRequest();
			xhr.onload = function() {
				var data = JSON.parse(this.responseText);
				logit(data);
				resolve(data);
			};
			xhr.onerror = reject;
			xhr.open('GET', 'apple_pay_comm.php?u=' + valURL);
			xhr.send();
		});
	}

	session.onshippingcontactselected = function(event) {
		getShippingOptions( event.shippingContact.countryCode );
		var status = ApplePaySession.STATUS_SUCCESS;
		var newShippingMethods = shippingOption;
		var newTotal = { type: 'final', label: '<?=PRODUCTION_DISPLAYNAME?>', amount: runningTotal() };
		var newLineItems =[{type: 'final',label: subTotalDescr, amount: runningAmount }, {type: 'final',label: 'P&P', amount: runningPP }];
		session.completeShippingContactSelection(status, newShippingMethods, newTotal, newLineItems );
	}
	
	session.onshippingmethodselected = function(event) {
		getShippingCosts( event.shippingMethod.identifier, true );
		var status = ApplePaySession.STATUS_SUCCESS;
		var newTotal = { type: 'final', label: '<?=PRODUCTION_DISPLAYNAME?>', amount: runningTotal() };
		var newLineItems =[{type: 'final',label: subTotalDescr, amount: runningAmount }, {type: 'final',label: 'P&P', amount: runningPP }];
		session.completeShippingMethodSelection(status, newTotal, newLineItems );
	}
	
	session.onpaymentmethodselected = function(event) {
		var newTotal = { type: 'final', label: '<?=PRODUCTION_DISPLAYNAME?>', amount: runningTotal() };
		var newLineItems =[{type: 'final',label: subTotalDescr, amount: runningAmount }, {type: 'final',label: 'P&P', amount: runningPP }];
		session.completePaymentMethodSelection( newTotal, newLineItems );
		
		
	}
	
	session.onpaymentauthorized = function (event) {
		var promise = sendPaymentToken(event.payment.token);
		promise.then(function (success) {	
			var status;
			if (success){
				status = ApplePaySession.STATUS_SUCCESS;
				document.getElementById("applePay").style.display = "none";
				document.getElementById("success").style.display = "block";
			} else {
				status = ApplePaySession.STATUS_FAILURE;
			}
			session.completePayment(status);
		});
	}

	function sendPaymentToken(paymentToken) {
		return new Promise(function(resolve, reject) {
			if ( debug == true )
			resolve(true);
			else
			reject;
		});
	}
	
	session.oncancel = function(event) {
	}
	session.begin();
};
	
function logit( data ){
	//if( debug == true ){
		console.log(data);
		$("#divLog").append(data);
	//}	
};
</script>
<!-- </body> -->
</html>
